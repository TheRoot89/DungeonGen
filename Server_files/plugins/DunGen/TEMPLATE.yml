# description of this dungeon room as in "Loading XX":
description: Template
# name of the schematic file used by this room (without .schematic):
schematic: entry
# Type of this room: ENTRY, PASSAGEWAY, PLATFORMROOM, BATTLEROOM
type: ENTRY


entry:
  # Pos of entry lower left "air" block, counted from the copy operation's first position:
  # Size of entry 'hole' fixed to 2x2 at the moment
  # Always looking east: X: forward, Y: up, Z: to the right
  placementLoc:
    ==: Vector
    x: 1.0
    y: 1.0
    z: 2.0
  # Where the door blocks should be generated (lower left air block)
  doorLoc:
    ==: Vector
    x: 1.0
    y: 1.0
    z: 2.0
  # dimensions of entry gate, always 2 at the moment:
  width: 2
  height: 2
  
  # Only in Passageways:
  # type of the actual door opening and closing process: 
  # 0: appearing, 1: falling, 2: piston
  type: 0
  # the material of the door blocks being generated, only for type 0: 'appearing', Check API whether this exists!
  doorMaterial: smooth_brick
  # location for redstone to close mechanical doors. Has to be present upon schematic save.
  redstoneLoc:
    ==: Vector
    x: 1.0
    y: 1.0
    z: 2.0

exit:
  # Direc: South=0, East=270, North=180, West=90:
  initDirec: 270
  # Pos of exit lower left "air" block, counted from the copy operation's first position
  # lower left in the direction looking 'out' of the module from the inside
  placementLoc:
    ==: Vector
    x: 7.0
    y: 1.0
    z: 2.0
  # Where the door blocks should be generated (lower left air block)
  doorLoc:
    ==: Vector
    x: 7.0
    y: 1.0
    z: 2.0
  # dimensions of exit gate, always 2 at the moment:
  width: 2
  height: 2
  
  # Only in Passageways: type of the actual door opening and closing process: 
  # 0: appearing, 1: falling, 2: piston
  type: 0
  # type 01 or 1: the material of the door blocks being generated, Check API whether this exists!
  doorMaterial: smooth_brick
  # type 2: location for redstone to close mechanical doors, as many as needed
  redstoneLoc:
    ==: Vector
    x: 1.0
    y: 1.0
    z: 2.0


# PassageWays only: respawn location for dead players:
respawnLoc:
  ==: Vector
  x: 2.0
  y: 1.0
  z: 3.0


# PlatformRooms only:
# Zielgebiet, dass die Spieler erreichen muessen:
targetRegCorner1:
  ==: Vector
  x: 41.0
  y: 1.0
  z: 1.0
targetRegCorner2:
  ==: Vector
  x: 42.0
  y: 1.0
  z: 2.0


# Rooms only: tasks to be carried out after placement:
tasks:
  task1:
    type: ENTITYSPAWN   # type of this task, ENTITYSPAWN, BLOCKSPWAN, EMPOWER or DEPOWER
    delay: 1.0          # delay to start this task [s]
    period: 0.0        # periodicity of this task [s]
    # Region dieses Tasks, beide Punkte gleich wenn ein Punkt:
    regionCorner1:
      ==: Vector
      x: 4.0
      y: 21.0
      z: 4.0
    regionCorner2:
      ==: Vector
      x: 4.0
      y: 21.0
      z: 4.0 
       
    # EntitySpawn only:
    # Spawns the entity type periodically and randomly in the target region in the given number.
    # Will not increase beyond the maximum number allowed.
    entityType: ZOMBIE
    count: 2        # number of entities to spawn
    maxCount: 20    # maximum number of these entities alive concurently if spawned periodically
    isTarget: true  # whether all of these have to be dead at the same time to succeed.
    
  
  task2:
    type: BLOCKSPAWN
    delay: 1.0
    period: 0.0
    regionCorner1:
      ==: Vector
      x: 4.0
      y: 21.0
      z: 4.0
    regionCorner2:
      ==: Vector
      x: 4.0
      y: 21.0
      z: 4.0
      
    # BlockSpawn only:
    # Will spawn the the designated block type in the target region. Increments the positionsing every period.
    blockType: smooth_brick
    incrementVector:
      ==: Vector
      x: 1.0
      y: 1.0
      z: 1.0
    
  task3:
    type: POWER
    delay: 1.0
    period: 0.0
    regionCorner1:
      ==: Vector
      x: 4.0
      y: 21.0
      z: 4.0
    regionCorner2:
      ==: Vector
      x: 4.0
      y: 21.0
      z: 4.0
    
    # Power only:
    # Will spawn a redstone block for 'onTime' part of the period. If no period the redstone will only be spawned once.
    # OnTime of 0 will spawn AIR insted of Redstone to switch OFF instead!
    onTime: 0.5   # [%], no onTime if 0, always on if 1
    
    
  task4:
    type: MAZE
    delay: 0.0
    period: 0.0
    regionCorner1:
      ==: Vector
      x: 2.0
      y: 1.0
      z: 1.0
    regionCorner2:
      ==: Vector
      x: 21.0
      y: 1.0
      z: 20.0
    
    # Maze only:
    # Will generate a Maze in the target area. The outer Wall needs to be present, with gaps for entry and exit!
    # The total area to be mazed needs to satisfy  length = n*(wayWidth+wallWidth)-wallWidth for both dimensions.
    # Define the width of walls and passageways in blocks:
    wayWidth: 2
    wallWidth: 1
    wallHeight: 3
    mazeMaterial: SMOOTH_BRICK
    