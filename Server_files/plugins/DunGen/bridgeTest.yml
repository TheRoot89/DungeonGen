description: Bridge Test Room
schematic: bridgeTest

#0: entry, 1: passageWay, 2: platformRoom, 3:battleRoom
type: 2

# Description of the entry
entry:
  # Pos of entry lower left "air" block, counted from the copy operation's first position:
  # Size of entry 'hole' fixed to 2x2 at the moment
  # Always looking east: X: forward, Y: up, Z: to the right
  placementLoc:
    ==: Vector
    x: 0.0
    y: 1.0
    z: 1.0
  # Where the door blocks should be generated (lower left air block)
  doorLoc:
    ==: Vector
    x: 0.0
    y: 1.0
    z: 1.0
  # dimensions of entry gate, always 2 at the moment:
  width: 2
  height: 2
  # type of the actual door opening and closing process: 
  # 0: appearing, 1: falling, 2: piston
  type: 0
  # the material of the door blocks being generated, only for type 0: 'appearing'
  doorMaterial: smooth_brick

exit:
  # Direc: South=0, East=270, North=180, West=90:
  initDirec: 270
  # Pos of exit lower left "air" block, counted from the copy operation's first position
  # lower left in the direction looking 'out' of the module from the inside
  placementLoc:
    ==: Vector
    x: 42.0
    y: 1.0
    z: 1.0
  # Where the door blocks should be generated (lower left air block)
  doorLoc:
    ==: Vector
    x: 42.0
    y: 1.0
    z: 1.0
  # dimensions of exit gate, always 2 at the moment:
  width: 2
  height: 2
  # type of the actual door opening and closing process: 
  # 0: appearing, 1: falling, 2: piston
  type: 0
  # the material of the door blocks being generated, only for type 0: 'appearing'
  doorMaterial: smooth_brick
  
    
# PlatformRooms only:
# Zielgebiet, dass die Spieler erreichen muessen:
targetRegCorner1:
  ==: Vector
  x: 41.0
  y: 1.0
  z: 1.0
targetRegCorner2:
  ==: Vector
  x: 42.0
  y: 1.0
  z: 2.0
  
  
# Rooms only: tasks to be carried out after placement:
tasks:
  task1:
    type: ENTITYSPAWN # type of this task, EntitySpawn, BlockSpawn, Empower or Depower
    delay: 5.0          # delay to start this task [s]
    period: 10.0        # periodicity of this task [s]
    # Region dieses Tasks, beide Punkte gleich wenn ein Punkt:
    regionCorner1:
      ==: Vector
      x: 4.0
      y: 1.0
      z: 1.0
    regionCorner2:
      ==: Vector
      x: 20.0
      y: 1.0
      z: 1.0 
       
    # EntitySpawn only:
    # Spawns the entity type periodically and randomly in the target region in the given number.
    # Will not increase beyond the maximum number allowed.
    entityType: ZOMBIE
    count: 3        # number of entities to spawn
    # TODO: implement maxCount
    maxCount: 20    # maximum number of these entities alive concurently if spawned periodically
    isTarget: false # whether all of these have to be dead at the same time to succeed.