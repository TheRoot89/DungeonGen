# description of this dungeon room as in "Loading XX":
description: another maze...
# name of the schematic file used by this room (without .schematic):
schematic: HoleMazeTest
# Type of this room: ENTRY, PASSAGEWAY, PLATFORMROOM, BATTLEROOM
type: PLATFORMROOM


entry:
  # Pos of entry lower left "air" block, counted from the copy operation's first position:
  # Size of entry 'hole' fixed to 2x2 at the moment
  # Always looking east: X: forward, Y: up, Z: to the right
  placementLoc:
    ==: Vector
    x: 0.0
    y: 8.0
    z: 11.0
  # Where the door blocks should be generated (lower left air block)
  doorLoc:
    ==: Vector
    x: 0.0
    y: 8.0
    z: 11.0
  # dimensions of entry gate, always 2 at the moment:
  width: 2
  height: 2

exit:
  # Direc: South=0, East=270, North=180, West=90:
  initDirec: 180
  # Pos of exit lower left "air" block, counted from the copy operation's first position
  # lower left in the direction looking 'out' of the module from the inside
  placementLoc:
    ==: Vector
    x: 11.0
    y: 3.0
    z: 0.0
  # Where the door blocks should be generated (lower left air block)
  doorLoc:
    ==: Vector
    x: 11.0
    y: 3.0
    z: 0.0
  # dimensions of exit gate, always 2 at the moment:
  width: 2
  height: 2



# PlatformRooms only:
# Zielgebiet, dass die Spieler erreichen muessen:
targetRegCorner1:
  ==: Vector
  x: 2.0
  y: 3.0
  z: 2.0
targetRegCorner2:
  ==: Vector
  x: 21.0
  y: 4.0
  z: 21.0


# Rooms only: tasks to be carried out after placement:
tasks:
  task1:
    type: ENTITYSPAWN   # type of this task, ENTITYSPAWN, BLOCKSPWAN, EMPOWER or DEPOWER
    delay: 1.0          # delay to start this task [s]
    period: 20          # periodicity of this task [s]
    executionCount: 5  # number of times this task shall be executed, has to be an integer
    # Region dieses Tasks, beide Punkte gleich wenn ein Punkt:
    regionCorner1:
      ==: Vector
      x: 2.0
      y: 7.0
      z: 2.0
    regionCorner2:
      ==: Vector
      x: 21.0
      y: 7.0
      z: 21.0 
       
    # EntitySpawn only:
    # Spawns the entity type periodically and randomly in the target region in the given number.
    # Will not increase beyond the maximum number allowed.
    entityType: WITHER_SKELETON
    count: 2        # number of entities to spawn
    maxCount: 5    # maximum number of these entities alive concurently if spawned periodically
    isTarget: true  # whether all of these have to be dead at the same time to succeed.
    
  task2:
    type: MAZE
    delay: 0.0
    period: 0.0
    executionCount: 1
    regionCorner1:
      ==: Vector
      x: 2.0
      y: 7.0
      z: 2.0
    regionCorner2:
      ==: Vector
      x: 21.0
      y: 7.0
      z: 21.0 
    
    # Maze only:
    # Will generate a Maze in the target area. The outer Wall needs to be present, with gaps for entry and exit!
    # The total area to be mazed needs to satisfy  length = n*(wayWidth+wallWidth)-wallWidth for both dimensions.
    # Define the width of walls and passageways in blocks:
    wayWidth: 2
    wallWidth: 1
    wallHeight: 3
    mazeMaterial: MAGMA
    carveBestExit: 16  # the exit can be carved trough the outer wall automatically. It carves as far as wallWidth
                      # 4-Bit Bitfield for outher walls allowed to be carved: [hole(16) left(8) upfront(4) right(2) start(1)] -> sum, 0 switches off
    # only needed if carveBestExit is on:
    entryCell: 4   # The maze cell number of the entry, has to be counted from left to right, looking into the maze from the entry!
    